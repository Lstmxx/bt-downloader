{"version":3,"file":"index.js","sources":["../../resources/icon.png?asset","../../src/main/utils/path.ts","../../src/shared/ipc.ts","../../src/main/core/SettingManage.ts","../../src/main/utils/transformer.ts","../../src/main/utils/announce.ts","../../src/main/core/dialog.ts","../../src/main/core/Downloader.ts","../../src/main/index.ts"],"sourcesContent":["\n          import { join } from 'path'\n          export default join(__dirname, __VITE_NODE_PUBLIC_ASSET__fc7763ad__)","import { app } from \"electron\";\n\nexport const getUserDataPath = () => {\n  return app.getPath(\"userData\");\n};\n\nexport const getDownloadPath = () => {\n  return app.getPath(\"downloads\");\n};\n\nexport const getConfigBasePath = () => {\n  const path = getUserDataPath();\n  return path;\n};\n","export const IPC_CHANNEL = {\n  GET_FILES_BY_URL: \"downloader:get-files-by-url\",\n  GET_DOWNLOADING_TASKS: \"downloader:get-downloading-tasks\",\n  START_DOWNLOAD: \"downloader:start-download\",\n  TORRENT_DONE: \"downloader:torrent-done\",\n  GET_DONE_TASKS: \"downloader:get-done-tasks\",\n  PAUSE_TORRENT: \"downloader:pause-torrent\",\n  RESUME_TORRENT: \"downloader:resume-torrent\",\n  GET_FILES_BY_TORRENT_FILE: \"downloader:get-files-by-torrent-file\",\n  GET_PAUSED_TASKS: \"downloader:get-paused-tasks\",\n  DELETE_TORRENT: \"downloader:delete-torrent\",\n};\n\nexport const IPC_DIALOG_CHANNEL = {\n  GET_DICT_PATH: \"dialog:get-dict-path\",\n};\n\nexport const IPC_CONFIG_CHANNEL = {\n  GET_CONFIG: \"config:get\",\n  SET_CONFIG: \"config:set\",\n};\n","import { SettingConfig } from \"@shared/type\";\nimport Store from \"electron-store\";\nimport { getConfigBasePath, getDownloadPath } from \"../utils/path\";\nimport { ipcMain } from \"electron\";\nimport { IPC_CONFIG_CHANNEL } from \"@shared/ipc\";\n\nexport class SettingManage {\n  configStore!: Store<SettingConfig>;\n\n  constructor() {\n    this.initConfig();\n    this.initListeners();\n  }\n\n  initListeners() {\n    ipcMain.handle(IPC_CONFIG_CHANNEL.GET_CONFIG, () => {\n      return this.getConfig();\n    });\n  }\n\n  initConfig() {\n    this.configStore = new Store<SettingConfig>({\n      name: \"config\",\n      cwd: getConfigBasePath(),\n      defaults: {\n        downloadPath: getDownloadPath(),\n      },\n    });\n  }\n  getConfig() {\n    return this.configStore.store;\n  }\n}\n","import { TaskInfo } from \"@shared/type\";\nimport type Webtorrent from \"webtorrent\";\n\nexport const torrentFileToFile = (files: Webtorrent.TorrentFile[]) => {\n  const result = files.map((file) => {\n    return {\n      name: file.name,\n      length: file.length,\n      progress: file.progress,\n      path: file.path,\n      downloaded: file.downloaded,\n    };\n  });\n  return result;\n};\n\nconst torrentPieceToPiece = (pieces: Array<Webtorrent.TorrentPiece | null>) => {\n  if (!pieces) return [];\n  const result = (pieces || []).map((piece) => {\n    return {\n      length: piece?.length || 0,\n      missing: piece?.missing || 0,\n    };\n  });\n  return result;\n};\n\nexport const torrentToTaskInfo = (torrent: Webtorrent.Torrent): TaskInfo => {\n  return {\n    infoHash: torrent.infoHash,\n    magnetURI: torrent.magnetURI,\n    torrentFileBlobURL: torrent.torrentFileBlobURL,\n    files: torrentFileToFile(torrent.files),\n    announce: torrent.announce,\n    [\"announce-list\"]: torrent[\"announce-list\"],\n    pieces: torrentPieceToPiece(torrent.pieces),\n    timeRemaining: torrent.timeRemaining,\n    received: torrent.received,\n    downloaded: torrent.downloaded,\n    uploaded: torrent.uploaded,\n    downloadSpeed: torrent.downloadSpeed,\n    uploadSpeed: torrent.uploadSpeed,\n    progress: torrent.progress,\n    ratio: torrent.ratio,\n    length: torrent.length,\n    pieceLength: torrent.pieceLength,\n    lastPieceLength: torrent.lastPieceLength,\n    numPeers: torrent.numPeers,\n    name: torrent.name,\n    created: torrent.created,\n    createdBy: torrent.createdBy,\n    comment: torrent.comment,\n    maxWebConns: torrent.maxWebConns,\n    path: torrent.path,\n    ready: torrent.ready,\n    paused: torrent.paused,\n    done: torrent.done,\n  };\n};\n","import path from \"path\";\nimport fs from \"node:fs\";\n\nconst filePath = path.join(__dirname, \"../../resources/best-tracker-list.txt\");\n\nconsole.log(\"filePath\", filePath);\n\nexport const getAnnounce = (): Promise<string[]> => {\n  return new Promise((resolve, reject) => {\n    fs.readFile(filePath, \"utf-8\", (err, data) => {\n      if (err) {\n        reject(err);\n      } else {\n        const dataList = data.split(\"\\n\").filter((line) => line.trim() !== \"\");\n        console.log(\"dataList\", dataList);\n        resolve(dataList);\n      }\n    });\n  });\n};\n","import { IPC_DIALOG_CHANNEL } from \"@shared/ipc\";\nimport { dialog, ipcMain, OpenDialogOptions } from \"electron\";\n\nconst getPathDialog = async (_, defaultPath: string) => {\n  const { filePaths } = await dialog.showOpenDialog({\n    properties: [\"openDirectory\"],\n    defaultPath,\n  });\n\n  return filePaths;\n};\n\nexport const getFileDialog = async (filters: Electron.FileFilter[], multi = false) => {\n  const properties: OpenDialogOptions[\"properties\"] = multi ? [\"openFile\", \"multiSelections\"] : [\"openFile\"];\n\n  const { filePaths } = await dialog.showOpenDialog({\n    properties,\n    filters,\n  });\n\n  return filePaths;\n};\n\nexport const initDialog = () => {\n  ipcMain.handle(IPC_DIALOG_CHANNEL.GET_DICT_PATH, getPathDialog);\n};\n","import Webtorrent from \"webtorrent\";\nimport { promises as fs } from \"node:fs\";\nimport { ipcMain, Notification } from \"electron\";\n\nimport { IPC_CHANNEL } from \"@shared/ipc\";\nimport { TaskInfo, GetFilesByUrlRes } from \"@shared/type\";\nimport { torrentFileToFile, torrentToTaskInfo } from \"../utils/transformer\";\nimport { getAnnounce } from \"../utils/announce\";\nimport { getFileDialog } from \"./dialog\";\n\n// const torrentProgress = () => {};\n\nconst getTorrentFiles = async (instance: Webtorrent.Instance, magnetURI: string | Buffer) => {\n  return new Promise<{ files: Webtorrent.TorrentFile[]; torrent: Webtorrent.Torrent }>(async (resolve, reject) => {\n    const t = await instance.get(magnetURI);\n\n    if (t) {\n      instance.remove(t);\n    }\n\n    console.log(\"add:\", magnetURI);\n\n    instance.add(magnetURI, function (torrent) {\n      torrent.pause();\n      console.log(\"torrent:\", torrent);\n      resolve({ files: torrent.files, torrent });\n      torrent.on(\"error\", (err) => {\n        reject(err);\n      });\n    });\n\n    instance.on(\"error\", (err) => {\n      console.log(\"torrent:\", err);\n      reject(err);\n    });\n  });\n};\n\nexport class Downloader {\n  instance!: Webtorrent.Instance;\n  win: Electron.BrowserWindow;\n\n  downloadingTasks: Webtorrent.Torrent[] = [];\n  pausedTasks: Webtorrent.Torrent[] = [];\n  doneTasks: TaskInfo[] = [];\n\n  constructor(win: Electron.BrowserWindow) {\n    this.win = win;\n    this.initWebtorrent();\n    this.initListeners();\n  }\n\n  async initWebtorrent() {\n    const announce = await getAnnounce();\n    this.instance = new Webtorrent({\n      tracker: {\n        announce,\n      },\n    });\n  }\n\n  initListeners() {\n    ipcMain.handle(IPC_CHANNEL.GET_FILES_BY_URL, async (_, magnetURI: string): Promise<GetFilesByUrlRes> => {\n      return this.getFilesByUrl(magnetURI);\n    });\n    ipcMain.handle(IPC_CHANNEL.GET_FILES_BY_TORRENT_FILE, async () => {\n      return this.getFilesByTorrentFile();\n    });\n\n    ipcMain.handle(\n      IPC_CHANNEL.START_DOWNLOAD,\n      (\n        _,\n        torrentList: {\n          magnetURI: string;\n          selectFiles: string[];\n        }[],\n        options: { downloadPath?: string },\n      ) => {\n        return this.startDownload(torrentList, options);\n      },\n    );\n\n    ipcMain.handle(IPC_CHANNEL.GET_DOWNLOADING_TASKS, () => {\n      return this.getDownloadingTasks();\n    });\n    ipcMain.handle(IPC_CHANNEL.GET_DONE_TASKS, () => {\n      return this.getDoneTasks();\n    });\n    ipcMain.handle(IPC_CHANNEL.GET_PAUSED_TASKS, () => {\n      return this.getPausedTasks();\n    });\n\n    ipcMain.handle(IPC_CHANNEL.PAUSE_TORRENT, (_, magnetURI: string) => {\n      this.pauseTorrent(magnetURI);\n    });\n\n    ipcMain.handle(IPC_CHANNEL.RESUME_TORRENT, (_, magnetURI: string) => {\n      this.resumeTorrent(magnetURI);\n    });\n    ipcMain.handle(IPC_CHANNEL.DELETE_TORRENT, (_, magnetURI: string) => {\n      this.deleteTorrent(magnetURI);\n    });\n  }\n\n  async getFilesByUrl(magnetURI: string): Promise<GetFilesByUrlRes> {\n    const { files, torrent } = await getTorrentFiles(this.instance, magnetURI);\n    return { files: torrentFileToFile(files), magnetURI: torrent.magnetURI };\n  }\n\n  async getFilesByTorrentFile() {\n    const [path] = await getFileDialog([{ name: \"Torrent\", extensions: [\"torrent\"] }]);\n    if (!path) return;\n\n    const data = await fs.readFile(path);\n\n    const { files, torrent } = await getTorrentFiles(this.instance, data);\n\n    return { files: torrentFileToFile(files), magnetURI: torrent.magnetURI };\n  }\n\n  handleTorrentDone(torrent: Webtorrent.Torrent) {\n    const { magnetURI } = torrent;\n    const index = this.downloadingTasks.findIndex((item) => item.magnetURI === magnetURI);\n    if (index !== -1) {\n      this.downloadingTasks.splice(index, 1);\n      this.doneTasks.push(torrentToTaskInfo(torrent));\n    }\n    this.win.webContents.send(IPC_CHANNEL.TORRENT_DONE, magnetURI);\n    new Notification({ title: torrent.name, body: \"下载完成\" }).show();\n  }\n\n  selectFilesInTorrent(torrent: Webtorrent.Torrent, selectFiles: string[]) {\n    torrent.files.forEach((file) => {\n      if (selectFiles.includes(file.name)) {\n        file.select();\n      } else {\n        file.deselect();\n      }\n    });\n  }\n\n  getDownloadingTasks() {\n    return this.downloadingTasks.map(torrentToTaskInfo);\n  }\n\n  getDoneTasks() {\n    return this.doneTasks;\n  }\n\n  getPausedTasks() {\n    return this.pausedTasks.map(torrentToTaskInfo);\n  }\n\n  startDownload(\n    torrentList: {\n      magnetURI: string;\n      selectFiles: string[];\n    }[],\n    options: { downloadPath?: string },\n  ) {\n    const result: TaskInfo[] = [];\n\n    torrentList.forEach(async (item) => {\n      let t = await this.instance.get(item.magnetURI);\n\n      if (t) {\n        this.instance.remove(t);\n      }\n\n      t = this.instance.add(item.magnetURI, { path: options.downloadPath }, (torrent) => {\n        this.selectFilesInTorrent(torrent, item.selectFiles);\n        torrent.on(\"done\", () => {\n          this.handleTorrentDone(torrent);\n        });\n      });\n\n      result.push(torrentToTaskInfo(t));\n      this.downloadingTasks.push(t);\n    });\n\n    return result;\n  }\n\n  async pauseTorrent(magnetURI: string) {\n    const t = await this.instance.get(magnetURI);\n    if (t) {\n      t.pause();\n      this.downloadingTasks = this.downloadingTasks.filter((item) => item.magnetURI !== magnetURI);\n      this.pausedTasks.push(t);\n    }\n  }\n\n  resumeTorrent(magnetURI: string) {\n    const t = this.instance.get(magnetURI);\n    if (t) {\n      t.resume();\n      this.pausedTasks = this.pausedTasks.filter((item) => item.magnetURI !== magnetURI);\n      this.downloadingTasks.push(t);\n    }\n  }\n\n  deleteTorrent(magnetURI: string) {\n    const t = this.instance.get(magnetURI);\n    if (t) {\n      t.pause();\n      this.instance.remove(t);\n    }\n  }\n\n  destroy() {\n    this.downloadingTasks.forEach((item) => {\n      item.pause();\n    });\n\n    this.instance.destroy();\n  }\n}\n","import { app, shell, BrowserWindow, ipcMain } from \"electron\";\nimport { join } from \"path\";\nimport { electronApp, optimizer, is } from \"@electron-toolkit/utils\";\nimport icon from \"../../resources/icon.png?asset\";\nimport { SettingManage } from \"./core/SettingManage\";\nimport { Downloader } from \"./core/Downloader\";\n\nimport { initDialog } from \"./core/dialog\";\n\nlet mainWindow: BrowserWindow;\nlet downloader: Downloader;\n\nfunction createWindow(): void {\n  // Create the browser window.\n  mainWindow = new BrowserWindow({\n    width: 1024,\n    height: 768,\n    minWidth: 1024,\n    minHeight: 768,\n    show: false,\n    autoHideMenuBar: true,\n    ...(process.platform === \"linux\" ? { icon } : {}),\n    webPreferences: {\n      preload: join(__dirname, \"../preload/index.mjs\"),\n      sandbox: false,\n    },\n    title: \"bt-downloader\",\n  });\n\n  mainWindow.on(\"ready-to-show\", () => {\n    mainWindow.show();\n  });\n\n  mainWindow.webContents.setWindowOpenHandler((details) => {\n    shell.openExternal(details.url);\n    return { action: \"deny\" };\n  });\n\n  // HMR for renderer base on electron-vite cli.\n  // Load the remote URL for development or the local html file for production.\n  if (is.dev && process.env[\"ELECTRON_RENDERER_URL\"]) {\n    mainWindow.loadURL(process.env[\"ELECTRON_RENDERER_URL\"]);\n  } else {\n    mainWindow.loadFile(join(__dirname, \"../renderer/index.html\"));\n  }\n}\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.whenReady().then(() => {\n  // Set app user model id for windows\n  electronApp.setAppUserModelId(\"com.electron\");\n\n  // Default open or close DevTools by F12 in development\n  // and ignore CommandOrControl + R in production.\n  // see https://github.com/alex8088/electron-toolkit/tree/master/packages/utils\n  app.on(\"browser-window-created\", (_, window) => {\n    optimizer.watchWindowShortcuts(window);\n  });\n\n  // IPC test\n  ipcMain.on(\"ping\", () => console.log(\"pong\"));\n\n  createWindow();\n\n  const settingManage = new SettingManage();\n  console.log(settingManage);\n\n  if (mainWindow) {\n    downloader = new Downloader(mainWindow);\n    console.log(downloader);\n  }\n\n  initDialog();\n\n  app.on(\"activate\", function () {\n    // On macOS it's common to re-create a window in the app when the\n    // dock icon is clicked and there are no other windows open.\n    if (BrowserWindow.getAllWindows().length === 0) createWindow();\n  });\n});\n\n// Quit when all windows are closed, except on macOS. There, it's common\n// for applications and their menu bar to stay active until the user quits\n// explicitly with Cmd + Q.\napp.on(\"window-all-closed\", () => {\n  if (process.platform !== \"darwin\") {\n    app.quit();\n  }\n  if (downloader) {\n    downloader.destroy();\n  }\n});\n\n// In this file you can include the rest of your app\"s specific main process\n// code. You can also put them in separate files and require them here.\n"],"names":["path","fs"],"mappings":"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"}