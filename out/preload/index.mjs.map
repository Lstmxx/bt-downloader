{"version":3,"file":"index.mjs","sources":["../../src/shared/ipc.ts","../../src/preload/index.ts"],"sourcesContent":["export const IPC_CHANNEL = {\n  GET_FILES_BY_URL: \"downloader:get-files-by-url\",\n  GET_DOWNLOADING_TASKS: \"downloader:get-downloading-tasks\",\n  START_DOWNLOAD: \"downloader:start-download\",\n  TORRENT_DONE: \"downloader:torrent-done\",\n  GET_DONE_TASKS: \"downloader:get-done-tasks\",\n  PAUSE_TORRENT: \"downloader:pause-torrent\",\n  RESUME_TORRENT: \"downloader:resume-torrent\",\n  GET_FILES_BY_TORRENT_FILE: \"downloader:get-files-by-torrent-file\",\n  GET_PAUSED_TASKS: \"downloader:get-paused-tasks\",\n  DELETE_TORRENT: \"downloader:delete-torrent\",\n};\n\nexport const IPC_DIALOG_CHANNEL = {\n  GET_DICT_PATH: \"dialog:get-dict-path\",\n};\n\nexport const IPC_CONFIG_CHANNEL = {\n  GET_CONFIG: \"config:get\",\n  SET_CONFIG: \"config:set\",\n};\n","import { contextBridge, ipcRenderer } from \"electron\";\nimport { electronAPI } from \"@electron-toolkit/preload\";\nimport { IPC_CHANNEL } from \"@shared/ipc\";\n\n// Custom APIs for renderer\nconst api = {\n  onTorrentDone: (cb: (magnetURI: string) => void) =>\n    ipcRenderer.on(IPC_CHANNEL.TORRENT_DONE, (_event, magnetURI: string) => cb(magnetURI)),\n};\n\n// Use `contextBridge` APIs to expose Electron APIs to\n// renderer only if context isolation is enabled, otherwise\n// just add to the DOM global.\nif (process.contextIsolated) {\n  try {\n    contextBridge.exposeInMainWorld(\"electron\", electronAPI);\n    contextBridge.exposeInMainWorld(\"api\", api);\n  } catch (error) {\n    console.error(error);\n  }\n} else {\n  // @ts-ignore (define in dts)\n  window.electron = electronAPI;\n\n  // @ts-ignore (define in dts)\n  window.api = api;\n}\n\n// --------- Expose some API to the Renderer process ---------\ncontextBridge.exposeInMainWorld(\"ipcRenderer\", {\n  on(...args: Parameters<typeof ipcRenderer.on>) {\n    const [channel, listener] = args;\n    return ipcRenderer.on(channel, (event, ...args) => listener(event, ...args));\n  },\n  off(...args: Parameters<typeof ipcRenderer.off>) {\n    const [channel, ...omit] = args;\n    return ipcRenderer.off(channel, ...omit);\n  },\n  send(...args: Parameters<typeof ipcRenderer.send>) {\n    const [channel, ...omit] = args;\n    return ipcRenderer.send(channel, ...omit);\n  },\n  invoke(...args: Parameters<typeof ipcRenderer.invoke>) {\n    const [channel, ...omit] = args;\n    return ipcRenderer.invoke(channel, ...omit);\n  },\n\n  // You can expose other APTs you need here.\n  // ...\n});\n"],"names":["args"],"mappings":";;AAAO,MAAM,cAAc;AAAA,EACzB,kBAAkB;AAAA,EAClB,uBAAuB;AAAA,EACvB,gBAAgB;AAAA,EAChB,cAAc;AAAA,EACd,gBAAgB;AAAA,EAChB,eAAe;AAAA,EACf,gBAAgB;AAAA,EAChB,2BAA2B;AAAA,EAC3B,kBAAkB;AAAA,EAClB,gBAAgB;AAClB;ACNA,MAAM,MAAM;AAAA,EACV,eAAe,CAAC,OACd,YAAY,GAAG,YAAY,cAAc,CAAC,QAAQ,cAAsB,GAAG,SAAS,CAAC;AACzF;AAKA,IAAI,QAAQ,iBAAiB;AACvB,MAAA;AACY,kBAAA,kBAAkB,YAAY,WAAW;AACzC,kBAAA,kBAAkB,OAAO,GAAG;AAAA,WACnC,OAAO;AACd,YAAQ,MAAM,KAAK;AAAA,EACrB;AACF,OAAO;AAEL,SAAO,WAAW;AAGlB,SAAO,MAAM;AACf;AAGA,cAAc,kBAAkB,eAAe;AAAA,EAC7C,MAAM,MAAyC;AACvC,UAAA,CAAC,SAAS,QAAQ,IAAI;AACrB,WAAA,YAAY,GAAG,SAAS,CAAC,UAAUA,UAAS,SAAS,OAAO,GAAGA,KAAI,CAAC;AAAA,EAC7E;AAAA,EACA,OAAO,MAA0C;AAC/C,UAAM,CAAC,SAAS,GAAG,IAAI,IAAI;AAC3B,WAAO,YAAY,IAAI,SAAS,GAAG,IAAI;AAAA,EACzC;AAAA,EACA,QAAQ,MAA2C;AACjD,UAAM,CAAC,SAAS,GAAG,IAAI,IAAI;AAC3B,WAAO,YAAY,KAAK,SAAS,GAAG,IAAI;AAAA,EAC1C;AAAA,EACA,UAAU,MAA6C;AACrD,UAAM,CAAC,SAAS,GAAG,IAAI,IAAI;AAC3B,WAAO,YAAY,OAAO,SAAS,GAAG,IAAI;AAAA,EAC5C;AAAA;AAAA;AAIF,CAAC;"}